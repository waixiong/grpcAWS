// Code generated by protoc-gen-go. DO NOT EDIT.
// source: myObject.proto

package cheetest

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type HelloRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_879bf309ef59a8d6, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_879bf309ef59a8d6, []int{1}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "cheetest.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "cheetest.HelloReply")
}

func init() { proto.RegisterFile("myObject.proto", fileDescriptor_879bf309ef59a8d6) }

var fileDescriptor_879bf309ef59a8d6 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xad, 0xf4, 0x4f,
	0xca, 0x4a, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48, 0xce, 0x48, 0x4d,
	0x2d, 0x49, 0x2d, 0x2e, 0x51, 0xd2, 0xe0, 0xe2, 0xf1, 0x48, 0xcd, 0xc9, 0xc9, 0x0f, 0x4a, 0x2d,
	0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x95, 0xd4, 0xb8, 0xb8, 0xa0, 0x2a, 0x0b, 0x72,
	0x2a, 0x71, 0xab, 0x33, 0x3a, 0xcc, 0xc4, 0xc5, 0xe9, 0x5b, 0x19, 0x9c, 0x5a, 0x54, 0x96, 0x99,
	0x9c, 0x2a, 0x64, 0xc7, 0xc5, 0x93, 0x5c, 0x94, 0x9a, 0x58, 0x92, 0x0a, 0xb1, 0x5f, 0x48, 0x4c,
	0x0f, 0x66, 0xb5, 0x1e, 0xb2, 0xbd, 0x52, 0x22, 0x18, 0xe2, 0x05, 0x39, 0x95, 0x4a, 0x0c, 0x42,
	0xd6, 0x5c, 0x9c, 0xe9, 0xa9, 0x25, 0x64, 0x6a, 0xb6, 0x05, 0x6b, 0x0e, 0x2e, 0x29, 0x4a, 0x4d,
	0xcc, 0x25, 0x55, 0xb3, 0x01, 0xa3, 0x90, 0x1d, 0x17, 0x57, 0x7a, 0x66, 0x59, 0x2a, 0x79, 0xfa,
	0x35, 0x18, 0x85, 0xac, 0xb8, 0x58, 0x9c, 0x33, 0x12, 0x4b, 0x48, 0xd7, 0x69, 0xc0, 0xe8, 0x64,
	0xca, 0x25, 0x53, 0x5c, 0x90, 0x98, 0x9c, 0xaa, 0x97, 0x5c, 0x5c, 0x52, 0x9a, 0x92, 0x9a, 0x57,
	0xa2, 0x07, 0x56, 0x07, 0xd3, 0xe0, 0xc4, 0x0b, 0x8b, 0xd1, 0x00, 0x50, 0x84, 0x06, 0x30, 0x2e,
	0x62, 0x62, 0xce, 0xf5, 0x0f, 0x48, 0x62, 0x03, 0xc7, 0xaf, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x2d, 0x85, 0x3d, 0xfd, 0xf1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyServiceClient is the client API for MyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyServiceClient interface {
	// reuqest response
	CreateObject(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// reuqest response
	GetObject(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// reuqest stream - server stream to client
	GetStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (MyService_GetStreamClient, error)
	// stream response - client stream to server
	GiveStream(ctx context.Context, opts ...grpc.CallOption) (MyService_GiveStreamClient, error)
	// bistream - live
	Chat(ctx context.Context, opts ...grpc.CallOption) (MyService_ChatClient, error)
}

type myServiceClient struct {
	cc *grpc.ClientConn
}

func NewMyServiceClient(cc *grpc.ClientConn) MyServiceClient {
	return &myServiceClient{cc}
}

func (c *myServiceClient) CreateObject(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/cheetest.MyService/createObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) GetObject(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/cheetest.MyService/getObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myServiceClient) GetStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (MyService_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MyService_serviceDesc.Streams[0], "/cheetest.MyService/getStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &myServiceGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MyService_GetStreamClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type myServiceGetStreamClient struct {
	grpc.ClientStream
}

func (x *myServiceGetStreamClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myServiceClient) GiveStream(ctx context.Context, opts ...grpc.CallOption) (MyService_GiveStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MyService_serviceDesc.Streams[1], "/cheetest.MyService/giveStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &myServiceGiveStreamClient{stream}
	return x, nil
}

type MyService_GiveStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloReply, error)
	grpc.ClientStream
}

type myServiceGiveStreamClient struct {
	grpc.ClientStream
}

func (x *myServiceGiveStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myServiceGiveStreamClient) CloseAndRecv() (*HelloReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (MyService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MyService_serviceDesc.Streams[2], "/cheetest.MyService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &myServiceChatClient{stream}
	return x, nil
}

type MyService_ChatClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type myServiceChatClient struct {
	grpc.ClientStream
}

func (x *myServiceChatClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myServiceChatClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MyServiceServer is the server API for MyService service.
type MyServiceServer interface {
	// reuqest response
	CreateObject(context.Context, *HelloRequest) (*HelloReply, error)
	// reuqest response
	GetObject(context.Context, *HelloRequest) (*HelloReply, error)
	// reuqest stream - server stream to client
	GetStream(*HelloRequest, MyService_GetStreamServer) error
	// stream response - client stream to server
	GiveStream(MyService_GiveStreamServer) error
	// bistream - live
	Chat(MyService_ChatServer) error
}

// UnimplementedMyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMyServiceServer struct {
}

func (*UnimplementedMyServiceServer) CreateObject(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (*UnimplementedMyServiceServer) GetObject(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (*UnimplementedMyServiceServer) GetStream(req *HelloRequest, srv MyService_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (*UnimplementedMyServiceServer) GiveStream(srv MyService_GiveStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GiveStream not implemented")
}
func (*UnimplementedMyServiceServer) Chat(srv MyService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

func RegisterMyServiceServer(s *grpc.Server, srv MyServiceServer) {
	s.RegisterService(&_MyService_serviceDesc, srv)
}

func _MyService_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheetest.MyService/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).CreateObject(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cheetest.MyService/GetObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyServiceServer).GetObject(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyService_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyServiceServer).GetStream(m, &myServiceGetStreamServer{stream})
}

type MyService_GetStreamServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type myServiceGetStreamServer struct {
	grpc.ServerStream
}

func (x *myServiceGetStreamServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _MyService_GiveStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyServiceServer).GiveStream(&myServiceGiveStreamServer{stream})
}

type MyService_GiveStreamServer interface {
	SendAndClose(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type myServiceGiveStreamServer struct {
	grpc.ServerStream
}

func (x *myServiceGiveStreamServer) SendAndClose(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myServiceGiveStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MyService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyServiceServer).Chat(&myServiceChatServer{stream})
}

type MyService_ChatServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type myServiceChatServer struct {
	grpc.ServerStream
}

func (x *myServiceChatServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myServiceChatServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cheetest.MyService",
	HandlerType: (*MyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createObject",
			Handler:    _MyService_CreateObject_Handler,
		},
		{
			MethodName: "getObject",
			Handler:    _MyService_GetObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getStream",
			Handler:       _MyService_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "giveStream",
			Handler:       _MyService_GiveStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _MyService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "myObject.proto",
}
